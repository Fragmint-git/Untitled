---
description: 
globs: 
alwaysApply: true
---

This is a VR Tournament Platform and Stats application built as a cross-platform desktop and mobile application. 

The architecture consists of:
Desktop Application (Electron-based):
Main process (main.js)
Renderer process (renderer/)
Preload scripts (preload.js)
Backend integration (backend-integration.js)

Backend Services:
Express.js server
SQLite database with Sequelize ORM
RESTful API endpoints

Mobile Support:
Capacitor-based mobile implementation
Cross-platform compatibility

Key Technologies:
Electron for desktop
Node.js/Express for backend
SQLite for data storage
Sequelize ORM
Capacitor for mobile

Architecture Guidelines:
Maintain separation between main and renderer processes
Follow the modular architecture pattern in renderer/js/modules/
Keep platform-specific code isolated in appropriate directories
Respect the existing module system for admin panel features

Code Organization:
- backend/ -> Server-side logic
- renderer/ -> Frontend UI and logic
- mobile/ -> Mobile-specific implementations
- assets/ -> Static resources
- data/ -> Data storage and management


Database Operations:
Use Sequelize ORM for all database operations
Follow existing model structures
Implement proper error handling for database operations
Maintain data consistency across platforms

Frontend Development:
Follow the modular pattern established in renderer/js/modules/
Ensure responsive design for cross-platform compatibility
Use the existing modal and notification systems
Maintain consistent UI/UX patterns

API Integration:
Use the established backend integration patterns
Implement proper error handling
Follow RESTful principles
Maintain backward compatibility

Security Practices:
Never expose sensitive data in renderer process
Use preload scripts for secure IPC communication
Implement proper input validation
Follow secure data storage practices

Cross-Platform Compatibility:
Test changes across Windows, macOS, and Linux
Ensure mobile responsiveness
Use platform-agnostic APIs when possible
Handle platform-specific features gracefully

Performance Guidelines:
Optimize database queries
Minimize main process operations
Use proper caching strategies
Implement lazy loading where appropriate

Error Handling:
Implement comprehensive error logging
Provide user-friendly error messages
Handle edge cases appropriately
Maintain error recovery mechanisms

Documentation:
Update README.md for significant changes
Document new modules and features
Maintain inline code documentation
Update build and deployment instructions

Testing:
Add tests for new features
Maintain existing test coverage
Test cross-platform compatibility
Verify mobile functionality

Version Control:
Follow .gitignore patterns
Maintain clean commit history
Document breaking changes
Handle dependencies properly in package.json


